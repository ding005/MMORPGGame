// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct GameLevelList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GameLevelList GetRootAsGameLevelList(ByteBuffer _bb) { return GetRootAsGameLevelList(_bb, new GameLevelList()); }
  public static GameLevelList GetRootAsGameLevelList(ByteBuffer _bb, GameLevelList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GameLevelList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameLevel? GameLevels(int j) { int o = __p.__offset(4); return o != 0 ? (GameLevel?)(new GameLevel()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int GameLevelsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameLevelList> CreateGameLevelList(FlatBufferBuilder builder,
      VectorOffset GameLevelsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    GameLevelList.AddGameLevels(builder, GameLevelsOffset);
    return GameLevelList.EndGameLevelList(builder);
  }

  public static void StartGameLevelList(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddGameLevels(FlatBufferBuilder builder, VectorOffset GameLevelsOffset) { builder.AddOffset(0, GameLevelsOffset.Value, 0); }
  public static VectorOffset CreateGameLevelsVector(FlatBufferBuilder builder, Offset<GameLevel>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGameLevelsVectorBlock(FlatBufferBuilder builder, Offset<GameLevel>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartGameLevelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameLevelList> EndGameLevelList(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GameLevelList>(o);
  }
};


}
