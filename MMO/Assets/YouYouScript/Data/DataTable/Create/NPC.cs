// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct NPC : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NPC GetRootAsNPC(ByteBuffer _bb) { return GetRootAsNPC(_bb, new NPC()); }
  public static NPC GetRootAsNPC(ByteBuffer _bb, NPC obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NPC __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string PrefabName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(8); }
  public string HeadPic { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHeadPicBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetHeadPicBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetHeadPicArray() { return __p.__vector_as_array<byte>(10); }
  public string HalfBodyPic { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHalfBodyPicBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetHalfBodyPicBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetHalfBodyPicArray() { return __p.__vector_as_array<byte>(12); }
  public string Talk { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTalkBytes() { return __p.__vector_as_span(14); }
#else
  public ArraySegment<byte>? GetTalkBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTalkArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<NPC> CreateNPC(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset PrefabNameOffset = default(StringOffset),
      StringOffset HeadPicOffset = default(StringOffset),
      StringOffset HalfBodyPicOffset = default(StringOffset),
      StringOffset TalkOffset = default(StringOffset)) {
    builder.StartObject(6);
    NPC.AddTalk(builder, TalkOffset);
    NPC.AddHalfBodyPic(builder, HalfBodyPicOffset);
    NPC.AddHeadPic(builder, HeadPicOffset);
    NPC.AddPrefabName(builder, PrefabNameOffset);
    NPC.AddName(builder, NameOffset);
    NPC.AddId(builder, Id);
    return NPC.EndNPC(builder);
  }

  public static void StartNPC(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset PrefabNameOffset) { builder.AddOffset(2, PrefabNameOffset.Value, 0); }
  public static void AddHeadPic(FlatBufferBuilder builder, StringOffset HeadPicOffset) { builder.AddOffset(3, HeadPicOffset.Value, 0); }
  public static void AddHalfBodyPic(FlatBufferBuilder builder, StringOffset HalfBodyPicOffset) { builder.AddOffset(4, HalfBodyPicOffset.Value, 0); }
  public static void AddTalk(FlatBufferBuilder builder, StringOffset TalkOffset) { builder.AddOffset(5, TalkOffset.Value, 0); }
  public static Offset<NPC> EndNPC(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NPC>(o);
  }
};


}
