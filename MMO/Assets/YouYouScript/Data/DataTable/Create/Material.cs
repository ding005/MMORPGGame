// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct Material : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Material GetRootAsMaterial(ByteBuffer _bb) { return GetRootAsMaterial(_bb, new Material()); }
  public static Material GetRootAsMaterial(ByteBuffer _bb, Material obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Material __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Quality { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Description { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(10); }
  public int Type { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FixedType { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FixedAddValue { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxAmount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PackSort { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CompositionProps { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCompositionPropsBytes() { return __p.__vector_as_span(22); }
#else
  public ArraySegment<byte>? GetCompositionPropsBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetCompositionPropsArray() { return __p.__vector_as_array<byte>(22); }
  public int CompositionMaterialID { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CompositionGold { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCompositionGoldBytes() { return __p.__vector_as_span(26); }
#else
  public ArraySegment<byte>? GetCompositionGoldBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetCompositionGoldArray() { return __p.__vector_as_array<byte>(26); }
  public int SellMoney { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Material> CreateMaterial(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      int Quality = 0,
      StringOffset DescriptionOffset = default(StringOffset),
      int Type = 0,
      int FixedType = 0,
      int FixedAddValue = 0,
      int maxAmount = 0,
      int packSort = 0,
      StringOffset CompositionPropsOffset = default(StringOffset),
      int CompositionMaterialID = 0,
      StringOffset CompositionGoldOffset = default(StringOffset),
      int SellMoney = 0) {
    builder.StartObject(13);
    Material.AddSellMoney(builder, SellMoney);
    Material.AddCompositionGold(builder, CompositionGoldOffset);
    Material.AddCompositionMaterialID(builder, CompositionMaterialID);
    Material.AddCompositionProps(builder, CompositionPropsOffset);
    Material.AddPackSort(builder, packSort);
    Material.AddMaxAmount(builder, maxAmount);
    Material.AddFixedAddValue(builder, FixedAddValue);
    Material.AddFixedType(builder, FixedType);
    Material.AddType(builder, Type);
    Material.AddDescription(builder, DescriptionOffset);
    Material.AddQuality(builder, Quality);
    Material.AddName(builder, NameOffset);
    Material.AddId(builder, Id);
    return Material.EndMaterial(builder);
  }

  public static void StartMaterial(FlatBufferBuilder builder) { builder.StartObject(13); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddQuality(FlatBufferBuilder builder, int Quality) { builder.AddInt(2, Quality, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset DescriptionOffset) { builder.AddOffset(3, DescriptionOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(4, Type, 0); }
  public static void AddFixedType(FlatBufferBuilder builder, int FixedType) { builder.AddInt(5, FixedType, 0); }
  public static void AddFixedAddValue(FlatBufferBuilder builder, int FixedAddValue) { builder.AddInt(6, FixedAddValue, 0); }
  public static void AddMaxAmount(FlatBufferBuilder builder, int maxAmount) { builder.AddInt(7, maxAmount, 0); }
  public static void AddPackSort(FlatBufferBuilder builder, int packSort) { builder.AddInt(8, packSort, 0); }
  public static void AddCompositionProps(FlatBufferBuilder builder, StringOffset CompositionPropsOffset) { builder.AddOffset(9, CompositionPropsOffset.Value, 0); }
  public static void AddCompositionMaterialID(FlatBufferBuilder builder, int CompositionMaterialID) { builder.AddInt(10, CompositionMaterialID, 0); }
  public static void AddCompositionGold(FlatBufferBuilder builder, StringOffset CompositionGoldOffset) { builder.AddOffset(11, CompositionGoldOffset.Value, 0); }
  public static void AddSellMoney(FlatBufferBuilder builder, int SellMoney) { builder.AddInt(12, SellMoney, 0); }
  public static Offset<Material> EndMaterial(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Material>(o);
  }
};


}
