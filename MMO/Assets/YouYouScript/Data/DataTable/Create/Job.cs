// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct Job : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Job GetRootAsJob(ByteBuffer _bb) { return GetRootAsJob(_bb, new Job()); }
  public static Job GetRootAsJob(ByteBuffer _bb, Job obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Job __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string HeadPic { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHeadPicBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetHeadPicBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetHeadPicArray() { return __p.__vector_as_array<byte>(8); }
  public string JobPic { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJobPicBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetJobPicBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetJobPicArray() { return __p.__vector_as_array<byte>(10); }
  public string PrefabName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(12); }
  public string Desc { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span(14); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(14); }
  public int Attack { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Defense { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Hit { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Dodge { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Cri { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Res { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string UsedPhyAttackIds { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUsedPhyAttackIdsBytes() { return __p.__vector_as_span(28); }
#else
  public ArraySegment<byte>? GetUsedPhyAttackIdsBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetUsedPhyAttackIdsArray() { return __p.__vector_as_array<byte>(28); }
  public string UsedSkillIds { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUsedSkillIdsBytes() { return __p.__vector_as_span(30); }
#else
  public ArraySegment<byte>? GetUsedSkillIdsBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetUsedSkillIdsArray() { return __p.__vector_as_array<byte>(30); }

  public static Offset<Job> CreateJob(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset HeadPicOffset = default(StringOffset),
      StringOffset JobPicOffset = default(StringOffset),
      StringOffset PrefabNameOffset = default(StringOffset),
      StringOffset DescOffset = default(StringOffset),
      int Attack = 0,
      int Defense = 0,
      int Hit = 0,
      int Dodge = 0,
      int Cri = 0,
      int Res = 0,
      StringOffset UsedPhyAttackIdsOffset = default(StringOffset),
      StringOffset UsedSkillIdsOffset = default(StringOffset)) {
    builder.StartObject(14);
    Job.AddUsedSkillIds(builder, UsedSkillIdsOffset);
    Job.AddUsedPhyAttackIds(builder, UsedPhyAttackIdsOffset);
    Job.AddRes(builder, Res);
    Job.AddCri(builder, Cri);
    Job.AddDodge(builder, Dodge);
    Job.AddHit(builder, Hit);
    Job.AddDefense(builder, Defense);
    Job.AddAttack(builder, Attack);
    Job.AddDesc(builder, DescOffset);
    Job.AddPrefabName(builder, PrefabNameOffset);
    Job.AddJobPic(builder, JobPicOffset);
    Job.AddHeadPic(builder, HeadPicOffset);
    Job.AddName(builder, NameOffset);
    Job.AddId(builder, Id);
    return Job.EndJob(builder);
  }

  public static void StartJob(FlatBufferBuilder builder) { builder.StartObject(14); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddHeadPic(FlatBufferBuilder builder, StringOffset HeadPicOffset) { builder.AddOffset(2, HeadPicOffset.Value, 0); }
  public static void AddJobPic(FlatBufferBuilder builder, StringOffset JobPicOffset) { builder.AddOffset(3, JobPicOffset.Value, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset PrefabNameOffset) { builder.AddOffset(4, PrefabNameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(5, DescOffset.Value, 0); }
  public static void AddAttack(FlatBufferBuilder builder, int Attack) { builder.AddInt(6, Attack, 0); }
  public static void AddDefense(FlatBufferBuilder builder, int Defense) { builder.AddInt(7, Defense, 0); }
  public static void AddHit(FlatBufferBuilder builder, int Hit) { builder.AddInt(8, Hit, 0); }
  public static void AddDodge(FlatBufferBuilder builder, int Dodge) { builder.AddInt(9, Dodge, 0); }
  public static void AddCri(FlatBufferBuilder builder, int Cri) { builder.AddInt(10, Cri, 0); }
  public static void AddRes(FlatBufferBuilder builder, int Res) { builder.AddInt(11, Res, 0); }
  public static void AddUsedPhyAttackIds(FlatBufferBuilder builder, StringOffset UsedPhyAttackIdsOffset) { builder.AddOffset(12, UsedPhyAttackIdsOffset.Value, 0); }
  public static void AddUsedSkillIds(FlatBufferBuilder builder, StringOffset UsedSkillIdsOffset) { builder.AddOffset(13, UsedSkillIdsOffset.Value, 0); }
  public static Offset<Job> EndJob(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Job>(o);
  }
};


}
