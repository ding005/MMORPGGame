// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct SpriteList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SpriteList GetRootAsSpriteList(ByteBuffer _bb) { return GetRootAsSpriteList(_bb, new SpriteList()); }
  public static SpriteList GetRootAsSpriteList(ByteBuffer _bb, SpriteList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SpriteList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Sprite? Sprites(int j) { int o = __p.__offset(4); return o != 0 ? (Sprite?)(new Sprite()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SpritesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SpriteList> CreateSpriteList(FlatBufferBuilder builder,
      VectorOffset SpritesOffset = default(VectorOffset)) {
    builder.StartObject(1);
    SpriteList.AddSprites(builder, SpritesOffset);
    return SpriteList.EndSpriteList(builder);
  }

  public static void StartSpriteList(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddSprites(FlatBufferBuilder builder, VectorOffset SpritesOffset) { builder.AddOffset(0, SpritesOffset.Value, 0); }
  public static VectorOffset CreateSpritesVector(FlatBufferBuilder builder, Offset<Sprite>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpritesVectorBlock(FlatBufferBuilder builder, Offset<Sprite>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSpritesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SpriteList> EndSpriteList(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SpriteList>(o);
  }
};


}
