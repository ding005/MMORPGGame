// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct GameLevelRegion : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GameLevelRegion GetRootAsGameLevelRegion(ByteBuffer _bb) { return GetRootAsGameLevelRegion(_bb, new GameLevelRegion()); }
  public static GameLevelRegion GetRootAsGameLevelRegion(ByteBuffer _bb, GameLevelRegion obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GameLevelRegion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GameLevelId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RegionId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string InitSprite { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInitSpriteBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetInitSpriteBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetInitSpriteArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<GameLevelRegion> CreateGameLevelRegion(FlatBufferBuilder builder,
      int Id = 0,
      int GameLevelId = 0,
      int RegionId = 0,
      StringOffset InitSpriteOffset = default(StringOffset)) {
    builder.StartObject(4);
    GameLevelRegion.AddInitSprite(builder, InitSpriteOffset);
    GameLevelRegion.AddRegionId(builder, RegionId);
    GameLevelRegion.AddGameLevelId(builder, GameLevelId);
    GameLevelRegion.AddId(builder, Id);
    return GameLevelRegion.EndGameLevelRegion(builder);
  }

  public static void StartGameLevelRegion(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddGameLevelId(FlatBufferBuilder builder, int GameLevelId) { builder.AddInt(1, GameLevelId, 0); }
  public static void AddRegionId(FlatBufferBuilder builder, int RegionId) { builder.AddInt(2, RegionId, 0); }
  public static void AddInitSprite(FlatBufferBuilder builder, StringOffset InitSpriteOffset) { builder.AddOffset(3, InitSpriteOffset.Value, 0); }
  public static Offset<GameLevelRegion> EndGameLevelRegion(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GameLevelRegion>(o);
  }
};


}
