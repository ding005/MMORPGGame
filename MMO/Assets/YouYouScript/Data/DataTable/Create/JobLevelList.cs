// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct JobLevelList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static JobLevelList GetRootAsJobLevelList(ByteBuffer _bb) { return GetRootAsJobLevelList(_bb, new JobLevelList()); }
  public static JobLevelList GetRootAsJobLevelList(ByteBuffer _bb, JobLevelList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public JobLevelList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public JobLevel? JobLevels(int j) { int o = __p.__offset(4); return o != 0 ? (JobLevel?)(new JobLevel()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int JobLevelsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<JobLevelList> CreateJobLevelList(FlatBufferBuilder builder,
      VectorOffset JobLevelsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    JobLevelList.AddJobLevels(builder, JobLevelsOffset);
    return JobLevelList.EndJobLevelList(builder);
  }

  public static void StartJobLevelList(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddJobLevels(FlatBufferBuilder builder, VectorOffset JobLevelsOffset) { builder.AddOffset(0, JobLevelsOffset.Value, 0); }
  public static VectorOffset CreateJobLevelsVector(FlatBufferBuilder builder, Offset<JobLevel>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateJobLevelsVectorBlock(FlatBufferBuilder builder, Offset<JobLevel>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartJobLevelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<JobLevelList> EndJobLevelList(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<JobLevelList>(o);
  }
};


}
