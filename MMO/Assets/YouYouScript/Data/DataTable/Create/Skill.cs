// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct Skill : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Skill GetRootAsSkill(ByteBuffer _bb) { return GetRootAsSkill(_bb, new Skill()); }
  public static Skill GetRootAsSkill(ByteBuffer _bb, Skill obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Skill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SkillName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetSkillNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSkillNameArray() { return __p.__vector_as_array<byte>(6); }
  public string SkillDesc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillDescBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetSkillDescBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSkillDescArray() { return __p.__vector_as_array<byte>(8); }
  public string SkillPic { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillPicBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetSkillPicBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSkillPicArray() { return __p.__vector_as_array<byte>(10); }
  public int LevelLimit { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IsPhyAttack { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AttackTargetCount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float AttackRange { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float AreaAttackRadius { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ShowHurtEffectDelaySecond { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int RedScreen { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AttackState { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AbnormalState { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffInfoID { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffTargetFilter { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffIsPercentage { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Skill> CreateSkill(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset SkillNameOffset = default(StringOffset),
      StringOffset SkillDescOffset = default(StringOffset),
      StringOffset SkillPicOffset = default(StringOffset),
      int LevelLimit = 0,
      int IsPhyAttack = 0,
      int AttackTargetCount = 0,
      float AttackRange = 0.0f,
      float AreaAttackRadius = 0.0f,
      float ShowHurtEffectDelaySecond = 0.0f,
      int RedScreen = 0,
      int AttackState = 0,
      int AbnormalState = 0,
      int BuffInfoID = 0,
      int BuffTargetFilter = 0,
      int BuffIsPercentage = 0) {
    builder.StartObject(16);
    Skill.AddBuffIsPercentage(builder, BuffIsPercentage);
    Skill.AddBuffTargetFilter(builder, BuffTargetFilter);
    Skill.AddBuffInfoID(builder, BuffInfoID);
    Skill.AddAbnormalState(builder, AbnormalState);
    Skill.AddAttackState(builder, AttackState);
    Skill.AddRedScreen(builder, RedScreen);
    Skill.AddShowHurtEffectDelaySecond(builder, ShowHurtEffectDelaySecond);
    Skill.AddAreaAttackRadius(builder, AreaAttackRadius);
    Skill.AddAttackRange(builder, AttackRange);
    Skill.AddAttackTargetCount(builder, AttackTargetCount);
    Skill.AddIsPhyAttack(builder, IsPhyAttack);
    Skill.AddLevelLimit(builder, LevelLimit);
    Skill.AddSkillPic(builder, SkillPicOffset);
    Skill.AddSkillDesc(builder, SkillDescOffset);
    Skill.AddSkillName(builder, SkillNameOffset);
    Skill.AddId(builder, Id);
    return Skill.EndSkill(builder);
  }

  public static void StartSkill(FlatBufferBuilder builder) { builder.StartObject(16); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddSkillName(FlatBufferBuilder builder, StringOffset SkillNameOffset) { builder.AddOffset(1, SkillNameOffset.Value, 0); }
  public static void AddSkillDesc(FlatBufferBuilder builder, StringOffset SkillDescOffset) { builder.AddOffset(2, SkillDescOffset.Value, 0); }
  public static void AddSkillPic(FlatBufferBuilder builder, StringOffset SkillPicOffset) { builder.AddOffset(3, SkillPicOffset.Value, 0); }
  public static void AddLevelLimit(FlatBufferBuilder builder, int LevelLimit) { builder.AddInt(4, LevelLimit, 0); }
  public static void AddIsPhyAttack(FlatBufferBuilder builder, int IsPhyAttack) { builder.AddInt(5, IsPhyAttack, 0); }
  public static void AddAttackTargetCount(FlatBufferBuilder builder, int AttackTargetCount) { builder.AddInt(6, AttackTargetCount, 0); }
  public static void AddAttackRange(FlatBufferBuilder builder, float AttackRange) { builder.AddFloat(7, AttackRange, 0.0f); }
  public static void AddAreaAttackRadius(FlatBufferBuilder builder, float AreaAttackRadius) { builder.AddFloat(8, AreaAttackRadius, 0.0f); }
  public static void AddShowHurtEffectDelaySecond(FlatBufferBuilder builder, float ShowHurtEffectDelaySecond) { builder.AddFloat(9, ShowHurtEffectDelaySecond, 0.0f); }
  public static void AddRedScreen(FlatBufferBuilder builder, int RedScreen) { builder.AddInt(10, RedScreen, 0); }
  public static void AddAttackState(FlatBufferBuilder builder, int AttackState) { builder.AddInt(11, AttackState, 0); }
  public static void AddAbnormalState(FlatBufferBuilder builder, int AbnormalState) { builder.AddInt(12, AbnormalState, 0); }
  public static void AddBuffInfoID(FlatBufferBuilder builder, int BuffInfoID) { builder.AddInt(13, BuffInfoID, 0); }
  public static void AddBuffTargetFilter(FlatBufferBuilder builder, int BuffTargetFilter) { builder.AddInt(14, BuffTargetFilter, 0); }
  public static void AddBuffIsPercentage(FlatBufferBuilder builder, int BuffIsPercentage) { builder.AddInt(15, BuffIsPercentage, 0); }
  public static Offset<Skill> EndSkill(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Skill>(o);
  }
};


}
