// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct JobList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static JobList GetRootAsJobList(ByteBuffer _bb) { return GetRootAsJobList(_bb, new JobList()); }
  public static JobList GetRootAsJobList(ByteBuffer _bb, JobList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public JobList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Job? Jobs(int j) { int o = __p.__offset(4); return o != 0 ? (Job?)(new Job()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int JobsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<JobList> CreateJobList(FlatBufferBuilder builder,
      VectorOffset JobsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    JobList.AddJobs(builder, JobsOffset);
    return JobList.EndJobList(builder);
  }

  public static void StartJobList(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddJobs(FlatBufferBuilder builder, VectorOffset JobsOffset) { builder.AddOffset(0, JobsOffset.Value, 0); }
  public static VectorOffset CreateJobsVector(FlatBufferBuilder builder, Offset<Job>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateJobsVectorBlock(FlatBufferBuilder builder, Offset<Job>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartJobsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<JobList> EndJobList(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<JobList>(o);
  }
};


}
