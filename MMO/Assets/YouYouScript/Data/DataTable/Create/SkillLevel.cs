// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct SkillLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SkillLevel GetRootAsSkillLevel(ByteBuffer _bb) { return GetRootAsSkillLevel(_bb, new SkillLevel()); }
  public static SkillLevel GetRootAsSkillLevel(ByteBuffer _bb, SkillLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SkillLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HurtValueRate { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpendMP { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float StateTime { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float AbnormalRatio { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int AStateTimes { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AStatexiaohao { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float SkillCDTime { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float BuffChance { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float BuffDuration { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int BuffValue { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NeedCharacterLevel { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpendGold { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SkillLevel> CreateSkillLevel(FlatBufferBuilder builder,
      int Id = 0,
      int SkillId = 0,
      int Level = 0,
      int HurtValueRate = 0,
      int SpendMP = 0,
      float StateTime = 0.0f,
      float AbnormalRatio = 0.0f,
      int AStateTimes = 0,
      int AStatexiaohao = 0,
      float SkillCDTime = 0.0f,
      float BuffChance = 0.0f,
      float BuffDuration = 0.0f,
      int BuffValue = 0,
      int NeedCharacterLevel = 0,
      int SpendGold = 0) {
    builder.StartObject(15);
    SkillLevel.AddSpendGold(builder, SpendGold);
    SkillLevel.AddNeedCharacterLevel(builder, NeedCharacterLevel);
    SkillLevel.AddBuffValue(builder, BuffValue);
    SkillLevel.AddBuffDuration(builder, BuffDuration);
    SkillLevel.AddBuffChance(builder, BuffChance);
    SkillLevel.AddSkillCDTime(builder, SkillCDTime);
    SkillLevel.AddAStatexiaohao(builder, AStatexiaohao);
    SkillLevel.AddAStateTimes(builder, AStateTimes);
    SkillLevel.AddAbnormalRatio(builder, AbnormalRatio);
    SkillLevel.AddStateTime(builder, StateTime);
    SkillLevel.AddSpendMP(builder, SpendMP);
    SkillLevel.AddHurtValueRate(builder, HurtValueRate);
    SkillLevel.AddLevel(builder, Level);
    SkillLevel.AddSkillId(builder, SkillId);
    SkillLevel.AddId(builder, Id);
    return SkillLevel.EndSkillLevel(builder);
  }

  public static void StartSkillLevel(FlatBufferBuilder builder) { builder.StartObject(15); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddSkillId(FlatBufferBuilder builder, int SkillId) { builder.AddInt(1, SkillId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(2, Level, 0); }
  public static void AddHurtValueRate(FlatBufferBuilder builder, int HurtValueRate) { builder.AddInt(3, HurtValueRate, 0); }
  public static void AddSpendMP(FlatBufferBuilder builder, int SpendMP) { builder.AddInt(4, SpendMP, 0); }
  public static void AddStateTime(FlatBufferBuilder builder, float StateTime) { builder.AddFloat(5, StateTime, 0.0f); }
  public static void AddAbnormalRatio(FlatBufferBuilder builder, float AbnormalRatio) { builder.AddFloat(6, AbnormalRatio, 0.0f); }
  public static void AddAStateTimes(FlatBufferBuilder builder, int AStateTimes) { builder.AddInt(7, AStateTimes, 0); }
  public static void AddAStatexiaohao(FlatBufferBuilder builder, int AStatexiaohao) { builder.AddInt(8, AStatexiaohao, 0); }
  public static void AddSkillCDTime(FlatBufferBuilder builder, float SkillCDTime) { builder.AddFloat(9, SkillCDTime, 0.0f); }
  public static void AddBuffChance(FlatBufferBuilder builder, float BuffChance) { builder.AddFloat(10, BuffChance, 0.0f); }
  public static void AddBuffDuration(FlatBufferBuilder builder, float BuffDuration) { builder.AddFloat(11, BuffDuration, 0.0f); }
  public static void AddBuffValue(FlatBufferBuilder builder, int BuffValue) { builder.AddInt(12, BuffValue, 0); }
  public static void AddNeedCharacterLevel(FlatBufferBuilder builder, int NeedCharacterLevel) { builder.AddInt(13, NeedCharacterLevel, 0); }
  public static void AddSpendGold(FlatBufferBuilder builder, int SpendGold) { builder.AddInt(14, SpendGold, 0); }
  public static Offset<SkillLevel> EndSkillLevel(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SkillLevel>(o);
  }
};


}
