// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct GameLevelMonster : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GameLevelMonster GetRootAsGameLevelMonster(ByteBuffer _bb) { return GetRootAsGameLevelMonster(_bb, new GameLevelMonster()); }
  public static GameLevelMonster GetRootAsGameLevelMonster(ByteBuffer _bb, GameLevelMonster obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GameLevelMonster __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GameLevelId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Grade { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RegionId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpriteId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpriteCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Exp { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Gold { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string DropEquip { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDropEquipBytes() { return __p.__vector_as_span(20); }
#else
  public ArraySegment<byte>? GetDropEquipBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDropEquipArray() { return __p.__vector_as_array<byte>(20); }
  public string DropItem { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDropItemBytes() { return __p.__vector_as_span(22); }
#else
  public ArraySegment<byte>? GetDropItemBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDropItemArray() { return __p.__vector_as_array<byte>(22); }
  public string DropMaterial { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDropMaterialBytes() { return __p.__vector_as_span(24); }
#else
  public ArraySegment<byte>? GetDropMaterialBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetDropMaterialArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<GameLevelMonster> CreateGameLevelMonster(FlatBufferBuilder builder,
      int Id = 0,
      int GameLevelId = 0,
      int Grade = 0,
      int RegionId = 0,
      int SpriteId = 0,
      int SpriteCount = 0,
      int Exp = 0,
      int Gold = 0,
      StringOffset DropEquipOffset = default(StringOffset),
      StringOffset DropItemOffset = default(StringOffset),
      StringOffset DropMaterialOffset = default(StringOffset)) {
    builder.StartObject(11);
    GameLevelMonster.AddDropMaterial(builder, DropMaterialOffset);
    GameLevelMonster.AddDropItem(builder, DropItemOffset);
    GameLevelMonster.AddDropEquip(builder, DropEquipOffset);
    GameLevelMonster.AddGold(builder, Gold);
    GameLevelMonster.AddExp(builder, Exp);
    GameLevelMonster.AddSpriteCount(builder, SpriteCount);
    GameLevelMonster.AddSpriteId(builder, SpriteId);
    GameLevelMonster.AddRegionId(builder, RegionId);
    GameLevelMonster.AddGrade(builder, Grade);
    GameLevelMonster.AddGameLevelId(builder, GameLevelId);
    GameLevelMonster.AddId(builder, Id);
    return GameLevelMonster.EndGameLevelMonster(builder);
  }

  public static void StartGameLevelMonster(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddGameLevelId(FlatBufferBuilder builder, int GameLevelId) { builder.AddInt(1, GameLevelId, 0); }
  public static void AddGrade(FlatBufferBuilder builder, int Grade) { builder.AddInt(2, Grade, 0); }
  public static void AddRegionId(FlatBufferBuilder builder, int RegionId) { builder.AddInt(3, RegionId, 0); }
  public static void AddSpriteId(FlatBufferBuilder builder, int SpriteId) { builder.AddInt(4, SpriteId, 0); }
  public static void AddSpriteCount(FlatBufferBuilder builder, int SpriteCount) { builder.AddInt(5, SpriteCount, 0); }
  public static void AddExp(FlatBufferBuilder builder, int Exp) { builder.AddInt(6, Exp, 0); }
  public static void AddGold(FlatBufferBuilder builder, int Gold) { builder.AddInt(7, Gold, 0); }
  public static void AddDropEquip(FlatBufferBuilder builder, StringOffset DropEquipOffset) { builder.AddOffset(8, DropEquipOffset.Value, 0); }
  public static void AddDropItem(FlatBufferBuilder builder, StringOffset DropItemOffset) { builder.AddOffset(9, DropItemOffset.Value, 0); }
  public static void AddDropMaterial(FlatBufferBuilder builder, StringOffset DropMaterialOffset) { builder.AddOffset(10, DropMaterialOffset.Value, 0); }
  public static Offset<GameLevelMonster> EndGameLevelMonster(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GameLevelMonster>(o);
  }
};


}
