// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace YouYou.DataTable
{

using global::System;
using global::FlatBuffers;

public struct SkillList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SkillList GetRootAsSkillList(ByteBuffer _bb) { return GetRootAsSkillList(_bb, new SkillList()); }
  public static SkillList GetRootAsSkillList(ByteBuffer _bb, SkillList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SkillList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Skill? Skills(int j) { int o = __p.__offset(4); return o != 0 ? (Skill?)(new Skill()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SkillsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SkillList> CreateSkillList(FlatBufferBuilder builder,
      VectorOffset SkillsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    SkillList.AddSkills(builder, SkillsOffset);
    return SkillList.EndSkillList(builder);
  }

  public static void StartSkillList(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddSkills(FlatBufferBuilder builder, VectorOffset SkillsOffset) { builder.AddOffset(0, SkillsOffset.Value, 0); }
  public static VectorOffset CreateSkillsVector(FlatBufferBuilder builder, Offset<Skill>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkillsVectorBlock(FlatBufferBuilder builder, Offset<Skill>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSkillsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SkillList> EndSkillList(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SkillList>(o);
  }
};


}
